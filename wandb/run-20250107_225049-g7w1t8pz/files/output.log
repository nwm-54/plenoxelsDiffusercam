Output folder: ./output/lego_v4_800_tv_0.00000
Found transforms_train.json file, assuming Blender data set!
Reading Training Transforms
adjacent views [180, 179, 178, 181, 177, 176]
len train 16
Reading Test Transforms
adjacent views [180, 179, 178, 181, 177, 176]
len test 6
full len test 194
Loading Training Cameras
Loading Test Cameras
Loading Full Test Cameras
Number of points at initialisation :  100000
tv weight  0
MAX VALUE 1.9566749930381775
Training progress:   0%|                                                        | 0/3000 [00:00<?, ?it/s]Traceback (most recent call last):
  File "train_sim.py", line 458, in <module>
    training(lp.extract(args), op.extract(args), pp.extract(args), args.test_iterations, args.save_iterations, args.checkpoint_iterations, args.start_checkpoint, args.debug_from)
  File "train_sim.py", line 239, in training
    render_pkg = render(tv_viewpoint, gaussians, pipe, bg)
  File "/home/vitran/gs7/gaussian_renderer/__init__.py", line 93, in render
    cov3D_precomp = cov3D_precomp)
  File "/home/vitran/miniconda3/envs/gaussian_splatting/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/vitran/miniconda3/envs/gaussian_splatting/lib/python3.7/site-packages/diff_gaussian_rasterization/__init__.py", line 219, in forward
    raster_settings,
  File "/home/vitran/miniconda3/envs/gaussian_splatting/lib/python3.7/site-packages/diff_gaussian_rasterization/__init__.py", line 41, in rasterize_gaussians
    raster_settings,
  File "/home/vitran/miniconda3/envs/gaussian_splatting/lib/python3.7/site-packages/diff_gaussian_rasterization/__init__.py", line 92, in forward
    num_rendered, color, radii, geomBuffer, binningBuffer, imgBuffer = _C.rasterize_gaussians(*args)
RuntimeError: CUDA out of memory. Tried to allocate 104.00 MiB (GPU 0; 11.90 GiB total capacity; 10.36 GiB already allocated; 49.81 MiB free; 11.22 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF